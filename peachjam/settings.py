"""
Django settings for peachjam project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
import logging
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'true') == 'true'

# SECURITY WARNING: keep the secret key used in production secret!
if DEBUG:
    SECRET_KEY = 'django-insecure-1q!zjpjmde2=yf0$doia!@74h-(f85(&&8)l05a+tt(b8g^rrt'
else:
    SECRET_KEY=os.environ.get('DJANGO_SECRET_KEY')


ALLOWED_HOSTS = ['*']


INSTALLED_APPS = [
    'peachjam.apps.PeachJamConfig',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'countries_plus',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'peachjam.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'peachjam.context_processors.general'
            ],
        },
    },
]

PEACHJAM = {
    'APP_NAME': os.environ.get('APP_NAME', 'Peachjam'),
    'SUPPORT_EMAIL': os.environ.get('SUPPORT_EMAIL'),

    'SENTRY_DSN_KEY': os.environ.get('SENTRY_DSN_KEY'),
    'SENTRY_ENVIRONMENT': os.environ.get('SENTRY_ENVIRONMENT', 'staging'),
}

WSGI_APPLICATION = 'peachjam.wsgi.application'
EMAIL_SUBJECT_PREFIX = f"[{PEACHJAM['APP_NAME']}] "

# Django all-auth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]
# admins must create accounts
ACCOUNT_SIGNUP_ENABLED = False
# sign in with email addresses
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# email addresses are required for new accounts
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_PRESERVE_USERNAME_CASING = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_EMAIL_SUBJECT_PREFIX = EMAIL_SUBJECT_PREFIX
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
LOGIN_URL = 'account_login'

# social logins
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline',
        }
    },
}

SOCIALACCOUNT_ADAPTER = 'peachjam.auth.SocialAccountAdapter'

if DEBUG:
    INSTALLED_APPS.append('debug_toolbar')
    INSTALLED_APPS.append('django_extensions')
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
    INTERNAL_IPS = ['127.0.0.1']

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
import dj_database_url

default_db_url = 'postgres://peachjam:peachjam@localhost:5432/peachjam'
db_config = dj_database_url.config(default=os.environ.get('DATABASE_URL', default_db_url))
db_config['ATOMIC_REQUESTS'] = True

DATABASES = {
    'default': db_config
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_ID = 1

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(os.getcwd(), 'staticfiles')

if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Elastic APM
APM_SERVER_URL = os.environ.get('APM_SERVER_URL', '')
ELK_PROJECT = 'peachjam-staging'
ELASTIC_APM = {
    'SERVICE_NAME': ELK_PROJECT,
    'SERVER_URL': APM_SERVER_URL,
}
if not DEBUG and APM_SERVER_URL:
    INSTALLED_APPS = INSTALLED_APPS + ['elasticapm.contrib.django']
    MIDDLEWARE = [
        'elasticapm.contrib.django.middleware.TracingMiddleware',
        'elasticapm.contrib.django.middleware.Catch404Middleware',
    ] + MIDDLEWARE


# Sentry
if not DEBUG:
    sentry_logging = LoggingIntegration(
        level=logging.INFO,  # Capture info and above as breadcrumbs
        event_level=None,  # Don't send errors based on log messages
    )
    sentry_sdk.init(
        dsn=PEACHJAM['SENTRY_DSN_KEY'],
        environment=PEACHJAM['SENTRY_ENVIRONMENT'],
        integrations=[DjangoIntegration(), sentry_logging],
        send_default_pii=True,
    )
